#
#   File: config.cfg. 
#
#   This file is read before any others, and will define every other
#   configuration that we use. 
#
#
#   From here we determine which directories are used for which data, and which
#   other config files are to be read. 
#
#
#   Config files can be used to define scenarios, which can be compared to
#   levels or quests in other games. 
#
#   Every file that is read, ever, whether it's a game asset or a config file,
#   has a pathname relative to the 'data' directory. This is my attempt at
#   making things unambiguous. Ambiguity has always been my biggest obstacle in
#   understanding other people's systems, and I try to spare people that
#   problem here. 
#
#
#   The approach I recommend you take is the following: 
#
#    - leave defaults the way they are
#
#    - add any additional materials (textures, models, sounds, music) under the
#    right directory, but with filenames that match what project/level/quest
#    you are working on. 
#
#   Example: you are working on a western action adventure. You can add
#
#   textures/western_01.cfg -> or name it as specifically as possible to avoid
#   ambiguity. 
#
#   Later, when you want to define a config file for a scenario, you just refer
#   to this config file in that scenario's config file. 
#
#
#

#   Other config files

#   Textures 
readconfig data/textures/textures.cfg

#   Models
readconfig data/models/models.cfg

#   Sounds
readconfig data/sounds/sounds.cfg

#   Music
readconfig data/music/music.cfg

#   Scenarios

#   Scripts

#   Default keyboard mappings

#   Video settings

#   Gameplay settings




testfunc

