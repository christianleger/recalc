


#include "recalc.h"

extern Camera camera ;
extern Area area ;

void render_world( int sec_progress )
{
    // render_fucking_world_shader() ;

    // shade this fucker muther 

    glColor3f( 1, 0, 0) ; 

    glMatrixMode( GL_MODELVIEW ) ; 
    glLoadIdentity() ; 

    // set camera perspective 

    glRotatef( -camera.pitch/10 , 1, 0, 0 ) ; 
    glRotatef( -camera.yaw/10 , 0, 1, 0 ) ; 
    glRotatef( -90 , 1, 0, 0 ) ; 
    
    // normalize to make the XY plane horizontal, and the Z axis be up-down. 

    //glTranslatef( -camera.pos.x, -camera.pos.y, -camera.pos.z ) ;
    glTranslatef( -camera.pos.x, -camera.pos.y, -(1.8+camera.pos.z) ) ;

    glBegin( GL_LINE_STRIP ) ; 
        glVertex3f( 0,  -50 + (50*(float)sec_progress/5000) , 0) ; 
        glVertex3f( 0,  -50 + (50*(float)sec_progress/5000) , 10) ; 
        glVertex3f( 1,  -50 + (50*(float)sec_progress/5000) , 10) ; 
        glVertex3f( 1,  -50 + (50*(float)sec_progress/5000) , 0) ; 
        glVertex3f( 0,  -50 + (50*(float)sec_progress/5000) , 0) ; 
    glEnd() ; 

    float v1[3] = { -10, -10, 1 } ; 
    float v2[3] = {  10, -10, 1 } ; 

    glBegin( GL_LINES ) ; 
        glVertex3fv( v1 ); glVertex3fv( v2 );

        v1[2] = -1 ; v2[2] = -1 ; glVertex3fv( v1 ); glVertex3fv( v2 );

        v1[1] = -15 ; v2[1] = -15 ; glVertex3fv( v1 ); glVertex3fv( v2 );

        v1[1] = -20 ; v2[1] = -20 ; glVertex3fv( v1 ); glVertex3fv( v2 );
    glEnd() ; 

/*
    */
}

void draw_square() 
{
}
void render_editor()
{
    float v1[3] = { 0, 0, 0 } ; 
   /* 
    glMatrixMode( GL_MODELVIEW ) ; 
    glLoadIdentity() ; 

    glRotatef( -camera.pitch/10 , 1, 0, 0 ) ; 
    glRotatef( -camera.yaw/10 , 0, 1, 0 ) ; 
    glRotatef( -90 , 1, 0, 0 ) ; 
    */
    
    glColor3f( 1, 1, 0) ; 

    glBegin( GL_LINE_STRIP ) ; 
        glVertex3fv( v1 ); v1[0] = area.size ;
        glVertex3fv( v1 ); v1[1] = area.size ;
        glVertex3fv( v1 ); v1[0] = 0 ;
        glVertex3fv( v1 ); v1[1] = 0 ; 
    glEnd() ; 

}

void render_tester()
{}

void render_menu()
{}

void render_console()
{}


